package com.mailsigner.util;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.log4j.Logger;

import com.mailsigner.MailSigner;

public class DatabaseUtil {

	String url;
	private static Logger log = MailSigner.getLog();

	public DatabaseUtil() {
		try {
			url = new String("jdbc:hsqldb:hsql://localhost:9001/mailsignerdb");
			Class.forName("org.hsqldb.jdbc.JDBCDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Creates the database as defined in projectFiles/db/db.sql. Will chech if
	 * tables are already present, if so does nothing, otherwise creates the 
	 * tables.
	 */
	public void createDatabase() {
		try {
			Connection con = DriverManager.getConnection(url);
			con.setAutoCommit(false);
			Statement stm = con.createStatement();
			createUserTable(stm);
			createSignatureTable(stm);
			createUserSignatureTable(stm);
			createFieldTable(stm);	
			createUserFieldTable(stm);
			createComputerTable(stm);
			stm.executeBatch();
			con.close();
		} catch (SQLException e) {
			log.error("Tables could not be created", e);
		}
	}
	
	/**
	 * Create the user table, if it doesn already exists.
	 * @param stm Adding batch to this statement.
	 * @throws SQLException Thrown if there is an error.
	 */
	private void createUserTable(Statement stm) throws SQLException {
		String sql = "CREATE TABLE IF NOT EXISTS User (" +
					"idUser INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL , " +
					"Logon VARCHAR(45) NOT NULL , " +
					"ActiveDirectory TINYINT NOT NULL, " +
					"PRIMARY KEY (idUser) );";
		log.debug("Creating the user table, SQL: " + sql);
		stm.addBatch(sql);
	}
	
	/**
	 * Create the signature table, if it doesn already exists.
	 * @param stm Adding batch to this statement.
	 * @throws SQLException Thrown if there is an error.
	 */
	private void createSignatureTable(Statement stm) throws SQLException {
		String sql = "CREATE TABLE IF NOT EXISTS Signature (" +
					"idSignature INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL , " +
					"Title VARCHAR(45) NOT NULL , " +
					"Premium TINYINT DEFAULT 0 NOT NULL, " +
					"Description BLOB NULL , " +
					"HTML BLOB NULL , " +
					"RTF BLOB NULL , " +
					"TXT BLOB NULL, " + 
					"PRIMARY KEY (idSignature) );";
		log.debug("Creating the signature table, SQL: " + sql);
		stm.addBatch(sql);
	}
	
	/**
	 * Create the user signature table, if it doesn already exists.
	 * @param stm Adding batch to this statement.
	 * @throws SQLException Thrown if there is an error.
	 */
	private void createUserSignatureTable(Statement stm) throws SQLException {
		String sql = "CREATE TABLE IF NOT EXISTS UserSignatures (" +
					"Signature_idSignature INT NOT NULL , " +
					"User_idUser INT NOT NULL , " +
					"Enabled TINYINT DEFAULT 0 NOT NULL , " +
					"PRIMARY KEY (Signature_idSignature, User_idUser) , " +
					"CONSTRAINT fk_UserSignatures_Signature " +
					  "FOREIGN KEY (Signature_idSignature) " +
					  "REFERENCES Signature (idSignature) " +
					  "ON DELETE CASCADE " +
					  "ON UPDATE NO ACTION," +
					"CONSTRAINT fk_UserSignatures_User1 " +
					  "FOREIGN KEY (User_idUser) " +
					  "REFERENCES User (idUser) " +
					  "ON DELETE CASCADE " +
					  "ON UPDATE NO ACTION );";
		log.debug("Creating the user signature table, SQL: " + sql);
		stm.addBatch(sql);
	}
	
	/**
	 * Create the field table, if it doesn already exists.
	 * @param stm Adding batch to this statement.
	 * @throws SQLException Thrown if there is an error.
	 */
	private void createFieldTable(Statement stm) throws SQLException {
		String sql = "CREATE TABLE IF NOT EXISTS Field (" +
					"idField INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL , " +
					"Label VARCHAR(45) NOT NULL , " +
					"Code VARCHAR(45) NOT NULL , " +
					"Protected TINYINT DEFAULT 0 NOT NULL, " +
					"PRIMARY KEY (idField) );";
		log.debug("Creating the field table, SQL: " + sql);
		stm.addBatch(sql);
	}
	
	/**
	 * Create the user field table, if it doesn already exists.
	 * @param stm Adding batch to this statement.
	 * @throws SQLException Thrown if there is an error.
	 */
	private void createUserFieldTable(Statement stm) throws SQLException {
		String sql = "CREATE TABLE IF NOT EXISTS UserFields (" +
					"User_idUser INT NOT NULL , " +
					"Field_idField INT NOT NULL , " +
					"Value VARCHAR(45) NULL , " +
					"PRIMARY KEY (User_idUser, Field_idField) , " +
					"CONSTRAINT fk_UserFields_User1 " +
					  "FOREIGN KEY (User_idUser) " +
					  "REFERENCES User (idUser) " +
					  "ON DELETE CASCADE " +
					  "ON UPDATE NO ACTION, " +
					"CONSTRAINT fk_UserFields_Field1 " +
					  "FOREIGN KEY (Field_idField) " +
					  "REFERENCES Field (idField) " +
					  "ON DELETE CASCADE " +
					  "ON UPDATE NO ACTION );";
		log.debug("Creating the user field table, SQL: " + sql);
		stm.addBatch(sql);
	}
	
	/**
	 * Create the computer table, if it doesn already exists.
	 * @param stm Adding batch to this statement.
	 * @throws SQLException Thrown if there is an error.
	 */
	private void createComputerTable(Statement stm) throws SQLException {
		String sql = "CREATE TABLE IF NOT EXISTS Computer (" +
					"idComputer INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL , "+
					"User_idUser INT NOT NULL , " +
					"Label VARCHAR(45) NULL, " +
					"Deployed TINYINT DEFAULT 0 NOT NULL , " +
					"PRIMARY KEY (idComputer, User_idUser) , " +
					"CONSTRAINT fk_Computer_User1 " +
					  "FOREIGN KEY (User_idUser) " +
					  "REFERENCES User (idUser) " +
					  "ON DELETE CASCADE " +
					  "ON UPDATE NO ACTION );";
		log.debug("Creating the computer table, SQL: " + sql);
		stm.addBatch(sql);
	}

	/**
	 * Inserts the default fields into the database, from properties file.
	 */
	public void insertDefaultFields() {
		try {
			Connection con = DriverManager.getConnection(url);
			String insertDefaultFieldsStatement = 
					"INSERT INTO Field (idField, Label, Code, Protected) VALUES (NULL, ?, ?, 1);";
			PreparedStatement statement = con.prepareStatement(insertDefaultFieldsStatement);
			InputStream defaultFieldsStream = DatabaseUtil.class.getResourceAsStream(MailSigner.getSettings().getDefaultFieldsFile());
			Map<String, String> defaultFields = Util.readPropertiesFileAsMap(defaultFieldsStream, ":");
			Set<Entry<String,String>> entries = defaultFields.entrySet();
			for (Entry<String, String> entry : entries) {
				statement.setString(1, entry.getKey());
				statement.setString(2, entry.getValue());
				statement.executeUpdate();
				log.debug("Inserting default field " + entry.getKey() + " with value " + entry.getValue() + " : START/STOP");
			}
			con.close();
		} catch (SQLException e) {
			log.error("An sql exception occured", e);
		} catch (Exception e) {
			log.error("General error", e);
		}
	}
	
	/**
	 * Back up the database
	 */
	public void backupDatabase() {
		//TODO: write method for backing up data
	}
	
	/**
	 * Reset the database by dropping tables and calling the createDatabase meth
	 * od, and insertDefaultFields method.
	 */
	public void resetDatabase() {
		try {
			Connection con = DriverManager.getConnection(url);
			Statement stm = con.createStatement();
			log.debug("Executing batch drop of tables");
			stm.addBatch("DROP TABLE IF EXISTS userfields;");
			stm.addBatch("DROP TABLE IF EXISTS usersignatures;");
			stm.addBatch("DROP TABLE IF EXISTS computer;");
			stm.addBatch("DROP TABLE IF EXISTS field;");
			stm.addBatch("DROP TABLE IF EXISTS signature;");
			stm.addBatch("DROP TABLE IF EXISTS user;");	
			stm.executeBatch();
			log.debug("Batch drop of tables succeded, recreating the database");
			createDatabase();
			insertDefaultFields();
		} catch (SQLException e) {
			log.error("Could not reset the database", e);
		}
	}
	
}
